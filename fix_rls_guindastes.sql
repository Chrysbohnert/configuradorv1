-- ============================================
-- CORRE√á√ÉO: Pol√≠ticas RLS para Tabela Guindastes
-- ============================================
-- Problema: Admin logado localmente n√£o consegue ver guindastes
-- Causa: RLS est√° bloqueando acesso porque n√£o h√° sess√£o Supabase ativa
-- Solu√ß√£o: Criar pol√≠ticas que permitam acesso p√∫blico para leitura
-- ============================================

-- 1. Verificar se RLS est√° habilitado na tabela guindastes
SELECT tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' AND tablename = 'guindastes';

-- 2. Remover pol√≠ticas antigas que podem estar bloqueando
DROP POLICY IF EXISTS "guindastes_select_authed" ON guindastes;
DROP POLICY IF EXISTS "guindastes_select_admin" ON guindastes;

-- ============================================
-- POL√çTICA 1: Leitura P√∫blica de Guindastes
-- ============================================
-- Permite que qualquer pessoa leia o cat√°logo de guindastes
-- Justificativa: √â um cat√°logo de produtos, n√£o √© informa√ß√£o sens√≠vel
CREATE POLICY "Allow public read access to guindastes" 
ON guindastes 
FOR SELECT 
USING (true);

-- ============================================
-- POL√çTICA 2: Apenas Admins Autenticados Podem Inserir
-- ============================================
CREATE POLICY "guindastes_insert_admin" 
ON guindastes 
FOR INSERT 
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1 FROM users 
    WHERE users.id = auth.uid()::text::bigint
    AND users.tipo = 'admin'
  )
);

-- ============================================
-- POL√çTICA 3: Apenas Admins Autenticados Podem Atualizar
-- ============================================
CREATE POLICY "guindastes_update_admin" 
ON guindastes 
FOR UPDATE 
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM users 
    WHERE users.id = auth.uid()::text::bigint
    AND users.tipo = 'admin'
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM users 
    WHERE users.id = auth.uid()::text::bigint
    AND users.tipo = 'admin'
  )
);

-- ============================================
-- POL√çTICA 4: Apenas Admins Autenticados Podem Excluir
-- ============================================
CREATE POLICY "guindastes_delete_admin" 
ON guindastes 
FOR DELETE 
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM users 
    WHERE users.id = auth.uid()::text::bigint
    AND users.tipo = 'admin'
  )
);

-- ============================================
-- Verificar pol√≠ticas criadas
-- ============================================
SELECT 
  schemaname,
  tablename,
  policyname,
  cmd as comando,
  roles::text[] as funcoes,
  qual as using_clause
FROM pg_policies 
WHERE tablename = 'guindastes'
ORDER BY policyname;

-- ============================================
-- TESTE: Verificar se a leitura funciona
-- ============================================
-- Este SELECT deve retornar todos os guindastes (mesmo sem autentica√ß√£o)
SELECT COUNT(*) as total_guindastes FROM guindastes;

-- ============================================
-- PR√ìXIMOS PASSOS
-- ============================================
-- 1. Copie este arquivo e execute no SQL Editor do Supabase
-- 2. Fa√ßa logout da aplica√ß√£o
-- 3. Fa√ßa login novamente
-- 4. Acesse "Gerenciar Guindastes"
-- 5. Os guindastes devem aparecer agora!
-- ============================================

-- Mensagem de sucesso
DO $$
BEGIN
  RAISE NOTICE '‚úÖ POL√çTICAS RLS CONFIGURADAS COM SUCESSO!';
  RAISE NOTICE '';
  RAISE NOTICE 'üìã Pol√≠ticas criadas:';
  RAISE NOTICE '   1. SELECT ‚Üí Acesso p√∫blico (leitura)';
  RAISE NOTICE '   2. INSERT ‚Üí Apenas admins autenticados';
  RAISE NOTICE '   3. UPDATE ‚Üí Apenas admins autenticados';
  RAISE NOTICE '   4. DELETE ‚Üí Apenas admins autenticados';
  RAISE NOTICE '';
  RAISE NOTICE '‚ö†Ô∏è IMPORTANTE:';
  RAISE NOTICE '   - Guindastes agora podem ser lidos por qualquer pessoa';
  RAISE NOTICE '   - Modifica√ß√µes exigem autentica√ß√£o Supabase como admin';
  RAISE NOTICE '   - Se precisar mais seguran√ßa, ajuste a pol√≠tica SELECT';
END $$;


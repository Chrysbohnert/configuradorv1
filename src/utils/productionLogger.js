/**
 * Sistema de Logging Condicional
 * Desabilita logs em produ√ß√£o automaticamente
 * Mant√©m logs em desenvolvimento para debugging
 */

const isDevelopment = import.meta.env.DEV;
const isProduction = import.meta.env.PROD;

/**
 * Logger otimizado que s√≥ executa em desenvolvimento
 */
class ProductionLogger {
  constructor(context = 'App') {
    this.context = context;
    this.enabled = isDevelopment;
  }

  /**
   * Log informativo
   */
  log(...args) {
    if (this.enabled) {
      console.log(`[${this.context}]`, ...args);
    }
  }

  /**
   * Log de erro (sempre ativo, mas sem stack trace em produ√ß√£o)
   */
  error(...args) {
    if (isDevelopment) {
      console.error(`[${this.context}] ‚ùå`, ...args);
    } else {
      // Em produ√ß√£o, apenas log b√°sico sem detalhes sens√≠veis
      console.error(`[${this.context}] Erro detectado`);
    }
  }

  /**
   * Log de aviso
   */
  warn(...args) {
    if (this.enabled) {
      console.warn(`[${this.context}] ‚ö†Ô∏è`, ...args);
    }
  }

  /**
   * Log de informa√ß√£o
   */
  info(...args) {
    if (this.enabled) {
      console.info(`[${this.context}] ‚ÑπÔ∏è`, ...args);
    }
  }

  /**
   * Log de debug (mais verboso)
   */
  debug(...args) {
    if (this.enabled) {
      console.debug(`[${this.context}] üîç`, ...args);
    }
  }

  /**
   * Log de sucesso
   */
  success(...args) {
    if (this.enabled) {
      console.log(`[${this.context}] ‚úÖ`, ...args);
    }
  }

  /**
   * Agrupa logs relacionados
   */
  group(label, callback) {
    if (this.enabled) {
      console.group(`[${this.context}] ${label}`);
      callback();
      console.groupEnd();
    } else {
      // Em produ√ß√£o, apenas executa sem agrupar
      callback();
    }
  }

  /**
   * Mede tempo de execu√ß√£o
   */
  time(label) {
    if (this.enabled) {
      console.time(`[${this.context}] ${label}`);
    }
  }

  timeEnd(label) {
    if (this.enabled) {
      console.timeEnd(`[${this.context}] ${label}`);
    }
  }

  /**
   * Tabela formatada
   */
  table(data) {
    if (this.enabled) {
      console.table(data);
    }
  }
}

/**
 * Cria uma inst√¢ncia do logger para um contexto espec√≠fico
 */
export const createLogger = (context) => {
  return new ProductionLogger(context);
};

/**
 * Logger global padr√£o
 */
export const logger = new ProductionLogger('Global');

/**
 * Substitui console global em produ√ß√£o (opcional - use com cuidado)
 */
export const disableConsoleInProduction = () => {
  if (isProduction) {
    const noop = () => {};
    console.log = noop;
    console.debug = noop;
    console.info = noop;
    console.warn = noop;
    // Mant√©m console.error para erros cr√≠ticos
  }
};

export default logger;
